coordinate_frames {
  #root frame is what everything is drawn in, hence ENU
  root_frame = "local";

  #body pose as defined by the state estimator
  body {
    relative_to = "local";
    history = 1000;
    pose_update_channel = "STATE_ESTIMATOR_POSE";
    initial_transform{
      translation = [0, 0, 0];
      rpy = [0, 0, 0];
    }
  }

  body_vicon {
    relative_to = "local";
    history = 1000;
    pose_update_channel = "VICON_POSE";
    initial_transform{
      translation = [0, 0, 0];
      rpy = [0, 0, 0];
    }
  }

  body_desired {
    relative_to = "local";
    history = 1000;
    pose_update_channel = "CONTROLLER_DESIRED_POSE";
    initial_transform{
      translation = [0, 0, 0];
      rpy = [0, 0, 0];
    }
  }

  # Andy: this is used in the INS handler in the state estimator
  ardupilot2 {
    relative_to = "body";
    history = 1000;
    initial_transform {
        translation = [0, 0, 0];
        #rpy = [180,0,0];
        rpy = [180,0,0];

    }
  }

  cameraL {
    relative_to = "body";
    history = 1000;
    initial_transform {
        translation = [0, 0, 0]; #FIXME
        rpy = [0,0,0];

    }
  }

  opencvFrame {
    relative_to = "cameraL";
    history = 1000;
    initial_transform {
        translation = [0, 0, 0];
        rpy = [-90,0,-90]; # when you do roll, pitch, yaw for these frames, you are moving
                           # the frame in the global coordinate, not it's own local "roll"
                           # ie think about taking the coordinate itself and moving it
                           # while looking at it, regardless of what orientation it is in

    }
  }

  optotrak_temp {
    relative_to = "local";
    history = 1000;
    initial_transform {
        translation = [0, 0, 0];
        rpy = [0,0,0];

    }
  }

  optotrak_temp2 {
    relative_to = "optotrak_temp";
    history = 1000;
    initial_transform {
        translation = [0, 0, 0];
        rpy = [0,0,0];

    }
  }

  optotrak {
    relative_to = "optotrak_temp2";
    history = 1000;
    initial_transform {
        translation = [0, 0, 0];
        #translation = [2.4741274, -0.13677342, 0.1121641];
        rpy = [0,0,0];

    }
  }

    # this transform exists so you can have two representations
    # of the body: "local" and "optotrak-local"
    optotrak-local {
    relative_to = "local";
    history = 1000;
    initial_transform {
        translation = [0, 0, 0];
        rpy = [0,0,0];

    }
  }

  #current - 7/21/2012 04 onward
  microstrain {
    relative_to = "body";
    history = 1000;
    initial_transform {
        translation = [0, 0, 0];
        rpy = [0,0,180];

    }
  }


  #current - 7/21/2012 logs 00-03 && 7/14/2012 - 9/16/2011
  microstrain_02 {
    relative_to = "body";
    history = 1000;
    initial_transform {
        translation = [0, 0, 0];
        rpy = [0,180,0];

    }
  }

  #7/20/2012 - 7/15/2012
  microstrain_01 {
    relative_to = "body";
    history = 1000;
    initial_transform {
        translation = [0, 0, 0];
        rpy = [180,0,0];

    }
  }

  #everything before 9/15/2011
  microstrain_old {
    relative_to = "body";
    history = 1000;
    initial_transform {
        translation = [0, 0, 0];
        rpy = [90, 0, 0];

    }
  }

  ublox_gps {
    relative_to = "local";
    history = 10000;
    initial_transform{
      translation = [0, 0, 0];
      rpy = [0, 0, 0];
    }
  }

  right_ail {
    relative_to = "body";
    history = 0;
    initial_transform{
      translation=[0, -0.5, -.1];
      rpy = [0, 0, 0];
    }
  }

  left_ail {
    relative_to = "body";
    history = 0;
    initial_transform{
      translation=[0, 0.5, -.1];
      rpy = [0, 0, 0];
    }
  }

  elevator {
    relative_to = "body";
    history = 0;
    initial_transform{
      translation=[-.9, 0, 0];
      rpy = [0, 0, 0];
    }
  }

  rudder {
    relative_to = "body";
    history = 0;
    initial_transform{
      translation=[-.8, 0, .15];
      rpy = [0, 0, 0];
    }
  }

# One Hokuyo UTM-30LX LIDAR
  laser {
    relative_to = "body";
    history = 0;
    initial_transform{
      translation = [ 0, 0, 0 ]; #sits on top of IMU
      rpy = [ 0, 0, 0 ];
    }
  }

  #simulation frames
  sim_body_gt {
    relative_to = "local";
    history = 1000;
    pose_update_channel = "SIM_POSE_GT";
    #pose_update_channel = "STATE_ESTIMATOR_POSE";
    initial_transform{
      translation = [0, 0, 0];
      rpy = [0, 0, 0];
    }
  }

  sim_laser {
    relative_to = "sim_body_gt";
    history = 0;
    initial_transform{
      translation = [ 0, 0, 0 ];
      rpy = [ 0, 0, 0 ];
    }
  }

}

model_renderer {
  main_body {
    frame = "body";
    visualization = "TBSC_assembly.obj";
    scale  = [.05, .05, .05];
    translation=[0,0,0];
    rpy = [90, 0, 0];
    #color = [0, 1, 0, 1];
  }
}

state_estimator {

    # ins,vicon, pose_meas
    init_sensors = ["ins"];
    # laser_gpf, ins, rgbd_gpf, fovis, legodo , vicon, pose_meas
    active_sensors = ["ins", "altimeter", "airspeed", "sideslip", "init_message"];

    pose_channel = "STATE_ESTIMATOR_POSE";
    filter_state_channel = "STATE_ESTIMATOR_STATE";

    publish_filter_state = true;
    publish_pose = true;
    republish_sensors = false;

    pose_render_frame = "body";

    # was this: 1000000 (1sec) for mav
    utime_history_span =1000000;

    ## starting position
    x0 {
        velocity = [0,0,0];
        angular_velocity = [0,0,0];
        position = [0, 0, 0];
        rpy = [0, 0, 0];
    }

    init_message {
        channel = "MAV_STATE_EST_INITIALIZER";
        downsample_factor = 1; # this should always be 1

        # if you give a value here, the state estimator will send a
        # timestamp over LCM when it completes its reset
        init_complete_channel = "MAV_STATE_EST_INIT_COMPLETE";

        roll_forward_on_receive = true;
        publish_head_on_message = true;

        utime_offset = 0;
    }

    history_span = 1.0;

    #initial state estimate standard deviations
    sigma0 {
        vb = 0.15; #m/s
        chi_xy = 3.0; #degrees
        chi_z = 3.0; #degrees
        Delta_xy = .5; #m
        Delta_z = 1;    #m

        gyro_bias = 0; # 0 #deg/seg initial certainty on bias values
        accel_bias = 0;# 0 #m/s^2 '' ''' '' '' 0 means that we think we have perfect knowledge of the bias
    }

    ins {
        channel = "attitude"; # "ATLAS_IMU_BATCH_FILTERED", "MICROSTRAIN_INS";
        utime_offset = 0; #units 1e-6 seconds
        downsample_factor = 1; # process 1 out of every this many. for 333Hz use 1. for 1kHz use 3
        roll_forward_on_receive = true;
        publish_head_on_message = true;

        # microstrain: 0.5 | 0.2 | 0 | 0
        # i always used 0.5 | 0.2 | 0 | 0
        q_gyro = 0.5; #deg/sec
        q_accel = 0.2; #m/s^2
        q_gyro_bias = 0; #deg/seg^2 | 0.001 suggested by charlie, but not deemed to be necessary
        q_accel_bias = 0; #m/sec^2/sec | 0.001 suggested by charlie and worked well on logs
        frame = "ardupilot2";

        #ms
        timestep_dt = 0.007142857; # REMEMBER TO CHANGE THIS IF YOU CHANGE THE IMU FREQUENCY or downsample factor

        num_to_init = 100; # was 100 for microstrain

        # apply notch filtering on input: (to atlas imu accel signals)
        atlas_filter = false;
        atlas_filter_freq = 87.0; # correct for after March 2014 work
    }

    gps{
      r_xy = 2.0; #2.0; #m
      #r_z = 2.0; #m
      r_z = 200.0; #m

      channel = "gps";
      #utime_offset = 273200; #.27 second delay optimized for on 11-05-03-outdoors.01
      #utime_offset = 145000; #.145 second delay from fixie-gps-2012-05-12.02
      utime_offset = 0;
      downsample_factor = 1; # process 1 out of every this many
    }

    airspeed{
        r = 15; #m/s (?)

        channel = "airspeed";

        utime_offset = 0;
        downsample_factor = 1; # process 1 out of every this many

        roll_forward_on_receive = false;
        publish_head_on_message = false;
    }

    altimeter{
        r = 5; #m -- altitude

        channel = "altimeter";

        utime_offset = 0;
        downsample_factor = 1; # process 1 out of every this many

        roll_forward_on_receive = false;
        publish_head_on_message = false;
    }

    sideslip{
        r = 5; #m/s

        channel = "sideslip";

        utime_offset = 0;
        downsample_factor = 1; # process 1 out of every this many

        roll_forward_on_receive = false;
        publish_head_on_message = false;
    }

}


gps_origin{
  latlon = [42.361561,-71.090634]; #outside of 32-380 on the brick area
  #elevation = 22;
  elevation = 0;

  #latlon = [42.357351,-71.099301]; #2nd base of baseball field next to track on Briggs
  #elevation = 0;

  #latlon=[ 42.35588476, -71.10487220, -24]; #lr3 origin for train tracks planning
  #elevation = -24;
}

lcm_channels{

    stereo_replay = "stereo_replay";
    gps = "gps";
    airspeed = "airspeed";
    airspeed_unchecked = "airspeed-unchecked";
    servo_out = "servo_out";
    battery_status = "battery-status";
    stereo_image_left = "stereo_image_left";
    stereo_image_right = "stereo_image_right";
    stereo_replay = "stereo_replay";
    stereo = "stereo";
    stereo_bm = "stereo-bm";
    stereo_with_xy = "stereo-octomap";
    octomap = "OCTOMAP";
    tvlqr_action = "tvlqr-action-out";
    mono_video = "stereo-mono";
    state_machine_state = "state-machine-state";
    octomap_hud = "octomap-hud";
    log_size_channel = "log-info-odroid-gps"; # note the lack of number at the end

}

obstacle_avoidance{

    # distance (meters) between a trajectory and an obstacle to be considered safe
    safe_distance_threshold = 5.0;

    # improved distance (meters) from obstacle required to commit to a new trajectory
    min_improvement_to_switch_trajs = 0.1; #1.5;
}

rc_switch_action{

    # mapping for RC controller switch positions
    # to perform actions in flight

    number_of_switch_positions = 18;

    rc_switch_delta_trigger = 15; # command difference in microseconds (us) to trigger a new action message

    ###
    # NOTE: SEE switch_rc_us in gps1 and gps2.cfg
    ###

    number_of_trajectories = 12;
    number_of_stereo_actions = 2;

    # NOTE: number of other actions = 2
    number_of_unused_slots = 2;

    trajectories = [
        1, # switch position 0, 0, 0 -- climb
        0, # switch position 0, 0, 1 -- stablization
        3, # switch position 0, 1, 0 --
        4, # switch position 0, 1, 1 --
        5, # switch position 0, 2, 0 --
        7, # switch position 0, 2, 1 --
        0, # switch position 1, 0, 0 --
        0, # switch position 1, 0, 1 --
        0, # switch position 1, 1, 0 --
        0, # switch position 1, 1, 1 --
        0, # switch position 1, 2, 0 --
        0, # switch position 1, 2, 1 --
    ];

    stereo_actions = [
        -1, # switch position 2, 0, 0 -- do nothing
        0   # switch position 2, 0, 1 -- pole to the left
    ];

    arm_for_takeoff_switch_position = 16; # switch position 2, 2, 0 -- arm for takeoff
    stop_stereo_recording_switch_position = 17; # switch position 2, 2, 1 -- stop stereo and write video to disk

}

tvlqr_controller{

    library_dir = "/home/$USER/realtime/controllers/TrajectoryLibrary/trajlib";

    stable_controller = 0;
    climb_no_throttle_controller = 2;
    climb_controller = 1;
    left_turn_controller = 3;
    right_turn_controller = 4;

    filter_distance_threshold = 1.0; # threshold in meters for stereo filter
    fitler_number_of_points_threshold = 3; # threshold for number of points nearby (including yourself)

    ground_safety_distance = 3.0; # meters above the ground to reject trajectories

}

bearing_controller{

    # delta in radians to fly relative to the launch direction. (+) is to the left, (-) is to the right
    offset = 0.0; #.785398; #45 degrees left

    bearing_tolerance = 0.175; # tolerance in radians for bang-bang bearing controller
}

launcher_takeoff{
    accel_threshold_x = 45.0; # m/s^2 on the x-axis to decide this is a takeoff
    accel_max_y = 15; # m/s^2 on the y-axis. Above this value, we will assume we're getting bumped and this isn't a takeoff
    accel_max_z = 15; # m/s^2 on the z-axis. Above this value, we will assume we're getting bumped and this isn't a takeoff

    # minimum forward velocity on the pitot tube to turn on the throttle
    # if we haven't reached this, we'll assume we're not in the air, or something is wrong
    # and transition back to waiting for takeoff
    min_velocity_x_for_throttle = 8.0; # in m/s

    # seconds between launch and the cable dropping away, allowing us to turn on the prop
    t_clear_cable = 0.8; # 0.666 second-s to clear 0.15 seconds as safety factor

    crusing_altitude = 3.0; # altitude to stop climbing and start checking for obstacles (in meters)
}
